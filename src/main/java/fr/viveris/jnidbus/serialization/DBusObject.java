/* Copyright 2019, Viveris Technologies <opensource@toulouse.viveris.fr>
 * Distributed under the terms of the Academic Free License.
 */
package fr.viveris.jnidbus.serialization;

/**
 * In order to reduce the overhead of JNI code, serialized object are put in an intermediate representation easier to parse
 * by the JNI code. This class is the intermediate representation.
 *
 * The structure is very basic, we only have a string representing the DBus signature and a raw Object array which contains
 * all the message data. nested objects are represented as nested DBusObject, arrays are represented as standard arrays,
 * which can be boxed or unboxed, their signature are inferred byt eh parent DBusObject signature. Finally, Maps are
 * represented as arrays of DBusObject containing only two value with their signature set to the one of a dict_entries
 * (ex: {si})
 *
 * When serialized, each DBusObject contain the correct DBus signature, when unserializing, only the root object contains
 * the correct signature. This due to libdbus limitations, the correct signature will eb applied during the process using
 * the Signature object generated by the root object.
 *
 * Warning for maintainers: this object is heavily used by JNI code and its properties are accessed directly, be careful
 * when modifying it
 */
public class DBusObject {

    /**
     * Dbus signature string
     */
    private String signature;

    /**
     * raw values following the signature
     */
    private Object[] values;

    public DBusObject(String signature, Object[] values) {
        this.signature = signature;
        this.values = values;
    }

    public String getSignature(){
        return this.signature;
    }

    public Object[] getValues(){
        return this.values;
    }
}
