plugins {
    id "me.champeau.gradle.jmh" version "0.4.8"
}

apply plugin: 'java'

sourceCompatibility = java_version
targetCompatibility = java_version

version jnidbus_version

// Set up dependencies.
repositories {
    mavenCentral()
}

dependencies {
    implementation "org.slf4j:slf4j-api:$slf4j_version"

    testCompile "junit:junit:$junit_version"
    testCompile "ch.qos.logback:logback-classic:$logback_version"

    jmh "org.openjdk.jmh:jmh-core:$jmh_version"
    jmh "org.openjdk.jmh:jmh-generator-annprocess:$jmh_version"
}

// Limit JUnit tests to classes ending in 'Test'.
test {
    include '**/*Test.class'
}

//add JNI library path for JMH and tests
test {
    jvmArgs "-Djava.library.path=${project.projectDir}/src/main/resources"
    testLogging {
        events "passed", "skipped", "failed"
    }
}
jmh{
    //the JMH gradle plugin do not pass env variable around when forking, so we set a Java parameter containing the env variable
    //and use it from the benchmark code
    String dbus_bus_path = System.getenv().get("DBUS_SESSION_BUS_ADDRESS")
    jvmArgs = ['-Djava.library.path='+project.projectDir+'/src/main/resources','-Ddbus.busPath='+dbus_bus_path+'']
    jmhVersion jmh_version
}

//add task for JNI code compilation
task compileJNI(type: Exec) {
    workingDir project.projectDir
    commandLine "${project.projectDir}/src/scripts/compileJNI.sh"
}
test.dependsOn compileJNI

//force gradle to run test each times
test.outputs.upToDateWhen {false}