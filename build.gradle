plugins {
    id "me.champeau.gradle.jmh" version "0.4.8"
}

apply plugin: 'java'

sourceCompatibility = java_version
targetCompatibility = java_version

// Set up dependencies.
repositories {
    mavenCentral()
}

dependencies {
    implementation "org.slf4j:slf4j-api:$slf4j_version"

    testCompile "junit:junit:$junit_version"
    testCompile "ch.qos.logback:logback-classic:$logback_version"

    jmh "org.openjdk.jmh:jmh-core:$jmh_version"
    jmh "org.openjdk.jmh:jmh-generator-annprocess:$jmh_version"
}

//add JNI library path for JMH and tests
def root = project.projectDir
allprojects{
    tasks.withType(Test) {
        filter{
            includeTestsMatching "*Test"
        }

        //add JNIDBus JNI library to path
        jvmArgs "-Djava.library.path=${root}/src/main/resources"

        //set JNI in berserk mode
        //jvmArgs "-Xcheck:jni"

        //show only failed test and their full exception
        testLogging {
            events "failed"
            exceptionFormat "full"
            //showStandardStreams = true
        }

        //always execute tests
        outputs.upToDateWhen {false}

        //launch tests in parallel
        maxParallelForks = 4

        //fail the test task as soon as one test is failing
        failFast = true
    }
}
jmh{
    //the JMH gradle plugin do not pass env variable around when forking, so we set a Java parameter containing the env variable
    //and use it from the benchmark code
    String dbus_bus_path = System.getenv().get("DBUS_SESSION_BUS_ADDRESS")
    jvmArgs = ['-Djava.library.path='+project.projectDir+'/src/main/resources','-Ddbus.busPath='+dbus_bus_path+'']
    jmhVersion jmh_version
}

//add task for JNI code compilation
task compileJNI(type: Exec) {
    workingDir project.projectDir
    commandLine "${project.projectDir}/src/scripts/compileJNI.sh"
}
test.dependsOn compileJNI

apply from: rootProject.file('maven.gradle')